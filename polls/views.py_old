from django.shortcuts import render, get_object_or_404
from django.http import HttpResponse, HttpResponseRedirect
from django.db.models import F

from django.urls import reverse
from django.http import Http404
from .models import Question, Choice

# Create your views here.
def index(request):
	latests_question_list = Question.objects.order_by('-pub_date')[:5]
	context = {
		'latests_question_list': latests_question_list,
	}
	return render(request, 'polls/index.html', context)

def detail(request, question_id):
	question = get_object_or_404(Question, pk=question_id)
	return render(request, 'polls/detail.html', {'question': question})

def results(request, question_id):
	question = get_object_or_404(Question, pk=question_id)
	return render(request, 'polls/results.html', {'question' : question})

def vote(request, question_id):
	question = get_object_or_404(Question, pk=question_id)
	try:
		selected_choice = question.choice_set.get(pk=request.POST['choice'])
	except (KeyError, Choice.DoesNotExist):
		#Redisplay the question voting form
		return render(request, 'polls/detail.html', {
			'question': question,
			'error_message': "You didn't select a choice.",
		})
	else:
		# the F objects refers to the column value in the DB
		# it is used to generate an SQL expression that is executed by the DB itself
		# this way we solve race condition
		selected_choice.votes = F('votes') + 1
		selected_choice.save()
		
		# selected_choice.refresh_from_db()
		# print(selected_choice.votes)
		# if print without reloading selected_choice.votes will have the value: "F('votes') + Value(1)"
		# we must reload from db to get the updated value

		# Always return an HttpResponseRedirect after successfully dealing
		# with POST data. This prevents data from beign posted twice
		# if the user hits the Back button.
		return HttpResponseRedirect(reverse('polls:results', args=(question.id, )))